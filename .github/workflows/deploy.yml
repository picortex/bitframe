name: Build & Test

on:
  push:
    branches: [ master ]

env:
  REMOTE_HOST: 65.21.254.230
  REMOTE_USER: root
  REMOTE_PASS: bitframe
  GH_TOKEN: ${{ github.token}} # ${{ secrets.GITHUB_TOKEN }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Setup docker daemon
        run: |
          sudo su
          echo '{ "insecure-registries": ["${{ env.REMOTE_HOST }}:1030"] }' > /etc/docker/daemon.json
          systemctl restart docker
      - uses: actions/checkout@v2
      - name: Set up JDK 16
        uses: actions/setup-java@v1
        with:
          java-version: 16
      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/yarn
            ~/.gradle/nodejs
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/gradle-wrapper.*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Making gradlew executable
        run: chmod +x ./gradlew
        working-directory: .
      - name: Cache konan
        uses: actions/cache@v2
        with:
          path: |
            ~/.konan/dependencies
            ~/.konan/kotlin-native-macos*
          key: ${{ runner.os }}-konan-
          restore-keys: ${{ runner.os }}-konan-
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: 'build/js'
          key: node-modules

      - name: Set Version
        id: versions
        run: |
          ./gradlew :pi-monitor:setVersions
          echo "::set-output name=current::$(cat ./pi-monitor/build/versioning/current.txt)"
          echo "::set-output name=current_safe::$(cat ./pi-monitor/build/versioning/current_safe.txt)"
          echo "::set-output name=previous::$(cat ./pi-monitor/build/versioning/previous.txt)"
          echo "::set-output name=previous_safe::$(cat ./pi-monitor/build/versioning/previous_safe.txt)"

      - name: Publish pi-monitor-client-sdk to PiCortexNpmRegistry
        run: ./gradlew publishJsNpmPublicationToPiCortex

      - name: Publish pi-monitor-client-sdk to PiCortexMavenRegistry
        run: ./gradlew publishJsNpmPublicationToPiCortex

      - name: Push server to picortex
        run: ./gradlew :pi-monitor-server:dockerPushToPicortex

      - name: Create Pi Monitor Docker Compose Staging File
        run: ./gradlew :pi-monitor:createDockerComposeStagingFile

      - name: Copy Docker-Compose file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          password: ${{ env.REMOTE_PASS }}
          source: "pi-monitor/build/docker/docker-compose-staging.yml"
          rm: true
          target: /picortex/apps/pi-monitor/${{ steps.versions.outputs.current }}/staging

      - name: Deploy Staging Stack
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          password: ${{ env.REMOTE_PASS }}
          script: |
            mkdir /picortex/apps/pi-monitor/${{ steps.versions.outputs.current }}/staging -p
            mv /picortex/apps/pi-monitor/${{ steps.versions.outputs.current }}/staging/pi-monitor/build/docker/docker-compose-staging.yml /apps/pi-monitor/${{ steps.versions.outputs.current }}/staging/docker-compose.yml
            cd /picortex/apps/pi-monitor/${{ steps.versions.outputs.current }}/staging
            rm pi-monitor -rf
            docker-compose pull
            docker stack rm pi-monitor-${{ steps.versions.outputs.previous_safe }}
            docker stack deploy -c docker-compose.yml pi-monitor-${{ steps.versions.outputs.current_safe }}
